as.numeric(outcome_care[outcome_care$State==state,var])
which.min(as.numeric(outcome_care[outcome_care$State==state,var]))
which.min(as.numeric(outcome_care[outcome_care$State==state,var]), na.rm=TRUE)
which.min(as.numeric(outcome_care[outcome_care$State==state,var]))
summary(which.min(as.numeric(outcome_care[outcome_care$State==state,var])))
summary(as.numeric(outcome_care[outcome_care$State==state,var]))
sort(as.numeric(outcome_care[outcome_care$State==state,var]), decreasing=TRUE)
sort(as.numeric(outcome_care[outcome_care$State==state,var])
sort(as.numeric(outcome_care[outcome_care$State==state,var]))
sort(as.numeric(outcome_care[outcome_care$State==state,var]))
which.min(as.numeric(outcome_care[outcome_care$State==state,var]))
which(hosp_nums %in% sort(hosp_nums)[1:4]
)
hosp_nums<-as.numeric(outcome_care[outcome_care$State==state,var])
which(hosp_nums %in% sort(hosp_nums)[1:4])
hosp_list <- as.character(outcome_care[index,"Hospital.Name"])
index<-which(hosp_nums %in% sort(hosp_nums)[1:4])
hosp_list <- as.character(outcome_care[index,"Hospital.Name"])
hosp_list
num
num=4
hosp_list
hosp_list <- sort(as.character(outcome_care[index,"Hospital.Name"]))
hosp_list
which.min
?which.min
result<-hosp_list[num]
resul
result
state
index<-which(hosp_nums %in% sort(hosp_nums)[1:6])
hosp_list <- sort(as.character(outcome_care[index,"Hospital.Name"]))
hosp_list
hosp_list <- sort(as.character(outcome_care[index,c("Hospital.Name",var)]))
hops_list
hosp_list
hosp_list <- sort(as.character(outcome_care[index,c("Hospital.Name",11)]))
hosp_list <- sort(as.character(outcome_care[index,11]))
hosp_list
index<-which(hosp_nums %in% sort(hosp_nums)[1:20])
index
hosp_list <- sort(as.character(outcome_care[index,"Hospital.Name"]))
hosp_list
hosp_list <- sort(as.character(outcome_care[index,var]))
hosp_list
hosp_nums<-as.numeric(outcome_care[outcome_care$State==state,var])
head(hosp_nums,10)
head(sort(hosp_nums),10)
head(sort(hosp_nums),15)
outcome_care[3935,]
outcome_care[3935,"Hospital.Name"]
outcome_care[3935,var]
outcome
outcome<-"heart failure"
s <- strsplit(outcome, " ")[[1]]
prevar<-paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=".")
var<- paste("Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.",prevar,sep="")
outcome_care[3935,var]
var
outcome_care[4085,var]
outcome_care[4103,var]
outcome_care[3935,]
s <- strsplit(outcome, " ")[[1]]
prevar<-paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=".")
var<- paste("Hospital.30.Day.Death..Mortality..Rates.from.",prevar,sep="")
index<-which(hosp_nums %in% sort(hosp_nums)[1:6])
hosp_nums<-as.numeric(outcome_care[outcome_care$State==state,var])
index<-which(hosp_nums %in% sort(hosp_nums)[1:6])
hosp_list <- sort(as.character(outcome_care[index,c("Hospital.Name",var)]))
hosp_list
hosp_list <- sort(as.character(outcome_care[index,"Hospital.Name"]))
hosp_list
outcome
hosp_nums<-as.numeric(outcome_care[outcome_care$State==state,var], na.rm=TRUE)
index<-which(hosp_nums %in% sort(hosp_nums)[1:6])
hosp_list <- sort(as.character(outcome_care[index,"Hospital.Name"]))
hosp_list
state
hosp_nums<-as.numeric(outcome_care[outcome_care$State==state,var])
hosp_nums
hosp_nums<-as.numeric(!is.na(outcome_care[outcome_care$State==state,var]))
hosp_nums
hosp_nums<-as.numeric(outcome_care[outcome_care$State==state,var], na.rm=TRUE)
hosp_nums<-as.numeric(outcome_care[outcome_care$State==state,vars], na.rm=TRUE)
vars <- c("Hospital.Name",paste("Hospital.30.Day.Death..Mortality..Rates.from.",prevar,sep="") )
hosp_nums<-as.numeric(outcome_care[outcome_care$State==state,vars], na.rm=TRUE)
hosp_nums<-outcome_care[outcome_care$State==state,vars]
hosp_nums<-outcome_care[outcome_care$State==state,vars]
hosp_nums$rate <- hosp_nums[,1]
hosp_nums$rate <- as.numeric(hosp_nums[,1])
hosp_nums
hosp_nums$rate <- as.numeric(hosp_nums[,2])
ls
index<-which(hosp_nums$rate %in% sort(hosp_nums$rate)[1:6])
index
hosp_list <- sort(as.character(outcome_care[index,"Hospital.Name"]))
hops_list
hosp_list
hosp_list <- sort(as.character(hosp_nums[index,"Hospital.Name"]))
hosp_list
hosp_list <- sort(as.character(hosp_nums[index,vars]))
hosp_list
hosp_list <- hosp_nums[index,vars]
hosp_list
hosp_nums<-outcome_care[outcome_care$State==state,vars]
hosp_nums[,2] <- as.numeric(hosp_nums[,2])
hosp_nums[order(dd[,2]),]
hosp_nums[order(hosp_nums[,2]),]
hosp_nums[order(hosp_nums[,2],hosp_nums[,1]),]
sort_df<-hosp_nums[order(hosp_nums[,2],hosp_nums[,1]),]
hosp_list <- sort_df[num,"Hospital.Name"]
hosp_lis
hosp_list
sort_df[num,"Hospital.Name"]
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
outcome_care <- read.csv("outcome-of-care-measures.csv", colsClasses="character")
## Check that state and outcome are valid
valid_outcome<-c("heart attack","heart failure", "pneumonia")
if(!state %in% levels(outcome_care$State)) stop("invalid state")
if(!outcome %in% valid_outcome) stop("invalid outcome")
#Helper strings are created
s <- strsplit(outcome, " ")[[1]]
prevar<-paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=".")
vars <- c("Hospital.Name",paste("Hospital.30.Day.Death..Mortality..Rates.from.",prevar,sep="") )
#Data extraction and sort by state and outcome
hosp_nums<-outcome_care[outcome_care$State==state,vars]
hosp_nums[,2] <- as.numeric(hosp_nums[,2])
sort_df<-hosp_nums[order(hosp_nums[,2],hosp_nums[,1]),]
## Check if num is valid
if (num > length(sort_df[,1])) return(NA)
## Return hospital name in that state with lowest 30-day death
## rate
sort_df[num,"Hospital.Name"]
}
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankhospital.R')
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankhospital.R')
if (ord == -1) return sorted_df[which.is.max(sorted_df[,2]),]
sorted_df[which.is.max(sorted_df[,2]),]
sorted_df[which.is.max(sorted_df[,2]),1]
sorted_df<-hosp_nums[order(hosp_nums[,2],hosp_nums[,1]),]
sorted_df[which.is.max(sorted_df[,2]),1]
sorted_df[which.max(sorted_df[,2]),1]
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/best.R')
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/best.R')
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankhospital.R')
best(state,outcome)
state
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/best.R')
best(state,outcome)
best(state,outcome,-1)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankhospital.R')
rankhospital(state,outcome,1:5)
rankhospital(state,outcome,1)
outcome_care <- read.csv("outcome-of-care-measures.csv", colClasses="character")
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankhospital.R')
rankhospital(state,outcome,1)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankhospital.R')
rankhospital(state,outcome,1)
rankhospital(state,outcome,1:2)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/best.R')
rankhospital(state,outcome,1:2)
rankhospital(state,outcome,100)
rankhospital(state,outcome,1000)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/best.R')
rankhospital(state,outcome,1:6)
rankhospital(state,outcome,"best")
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankhospital.R')
rankhospital(state,outcome,"best")
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankhospital.R')
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/best.R')
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankhospital.R')
rankhospital(state,outcome,"best")
rankhospital(state,outcome,"worst")
suppressWarnings(rankhospital(state,outcome,"worst"))
rankhospital(state,outcome,"worst")
source('~/.active-rstudio-document')
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/best.R')
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankhospital.R')
rankhospital(state,outcome,"worst")
rankhospital(state,outcome,"best")
rankhospital(state,outcome,1:2)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankhospital.R')
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankhospital.R')
rankhospital(state,outcome,1:2)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankhospital.R')
rankhospital(state,outcome,1:2)
mas
x()
max(1:2)
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankhospital.R')
rankhospital("MN", "heart attack", 5000)
rankhospital("MD", "heart attack", "worst")
suppressWarnings(outcome_care[,vars[2]]<-as.numeric(outcome_care[,vars[2]]))
df<-outcome_care[,vars]
head(df)
vars <- c("State","Hospital.Name",paste("Hospital.30.Day.Death..Mortality..Rates.from.",prevar,sep="") )
suppressWarnings(outcome_care[,vars[3]]<-as.numeric(outcome_care[,vars[3]]))
df<-outcome_care[,vars]
head(df)
df<-outcome_care[,vars]
df_sort<-df[order(df[,vars[1]],df[,vars[3]],df[,vars[2]]),]
head(df_sort)
View(df_sort)
?split
df_split<-split(df_sort,df_sort[,1])
lapply(df_split,2,min)
lapply(df_split,min)
wapply(df_split,min)
sapply(df_split,min)
lapply(df_split[[]][3],min)
lapply(df_split[[,]][3],min)
lapply(df_split[[1:54]][3],min)
lapply(split(df_sort[,3],df_sort[,1]),min)
split(df_sort[,3],df_sort[,1])
split(df_sort[,3],df_sort[,1])[`]
split(df_sort[,3],df_sort[,1])[1]
split(df_sort[,3],df_sort[,1])[1][num]
num
unlist(split(df_sort[,3],df_sort[,1])[1])[num]
unlist(split(df_sort[,3],df_sort[,1]))[num]
unlist(split(df_sort[,3],df_sort[,1]))
split(df_sort[,2:3],df_sort[,1])
lapply(split(df_sort[,2:3],df_sort[,1]),best(df_sort$State,outcome,-1))
lapply(split(df_sort[,2:3],df_sort[,1]),best(,outcome,-1))
lapply(split(df_sort,df_sort[,1]),best)
split(df_sort,df_sort[,1])
lapply(split(df_sort,df_sort[,1]),4)
lapply(split(df_sort,df_sort[,1]),function(x)x[num])
lapply(split(df_sort,df_sort[,1]),function(x)x[num,])
unlist(lapply(split(df_sort,df_sort[,1]),function(x)x[num,]))
sapply(split(df_sort,df_sort[,1]),function(x)x[num,])
sapply(split(df_sort,df_sort[,1]),function(x)unlist(x[num,]))
tapply(split(df_sort,df_sort[,1]),function(x)x[num,])
lapply(split(df_sort,df_sort[,1]),function(x)as.data.frame(x[num,]))
unlist(lapply(split(df_sort,df_sort[,1]),function(x)as.data.frame(x[num,])))
lapply(split(df_sort,df_sort[,1]),function(x)as.data.frame(x[num,]))
as.data.frame(lapply(split(df_sort,df_sort[,1]),function(x)as.data.frame(x[num,])))
as.vector(lapply(split(df_sort,df_sort[,1]),function(x)as.data.frame(x[num,])))
as.data.frame(lapply(split(df_sort,df_sort[,1]),function(x)as.data.frame(x[num,])))
lapply(split(df_sort,df_sort[,1]),function(x)as.data.frame(x[num,]))
lapply(split(df_sort,df_sort[,1]),function(x)as.data.frame(x[num,1:2]))
lapply(split(df_sort,df_sort[,1]),function(x)as.data.frame(x[num,2],x[1,1]))
lapply(split(df_sort,df_sort[,1]),function(x)as.data.frame("Hospital.Name"=x[num,2],"State"=x[1,1]))
?as.data.frame
?data.frame
names(x)<-C("State","Name")})
names(x)<-c("State","Name")})
x})
make_statedf<-function(x,num){
as.data.frame(x[num,2],x[1,1])
names(x)<-c("State","Name")
x
}
make_statedf<-function(x,num){
y<-as.data.frame(x[num,2],x[1,1])
names(y)<-c("State","Name")
y
}
lapply(split(df_sort,df_sort[,1]),make_statedf)
lapply(split(df_sort,df_sort[,1]),function(x)make_statedf(x,num))
make_statedf<-function(x,num){
y<-as.data.frame(x[num,2],x[1,1])
print(names(y))
y
}
lapply(split(df_sort,df_sort[,1]),function(x)make_statedf(x,num))
make_statedf<-function(x,num){
y<-as.data.frame(x[num,2],x[1,1])
y
}
lapply(split(df_sort,df_sort[,1]),function(x)make_statedf(x,num))
make_statedf<-function(x,num){
y<-as.data.frame(x[num,2],x[1,1])
y
}
helper<-lapply(split(df_sort,df_sort[,1]),function(x)make_statedf(x,num))
helper
helper[[1:2]]
helper[[1]][1]
helper[[1]][1:2]
helper[[1]][1]
helper[[2]][1]
helper<-lapply(split(df_sort,df_sort[,1]),function(x)make_statedf(x,num))
helper[[1:2]][1]
helper[[1]][1]
helper[1:2[1]
helper[1:2][1]
helper[1:3][1]
helper[1][1]
helper[2][1]
helper[c(2,3)][1]
helper[c(2)][1]
helper[[c(1,2)]][1]
row.name(helper)
helper[2][1]
as.vector(helper[2][1])
as.vector(helper[2][[1]])
as.vector(helper[3][[1]])
df_final<-[]
df_final<-c(1)
for (i in 1:54){
df_final<-rbind(df_final,as.vector(helper[i][[1]]))
}
df_final<-matrix(ncol=2,nrows=54)
df_final<-matrix(ncol=2,nrow=54)
for (i in 1:54){
df_final<-rbind(df_final,as.vector(helper[i][[1]]))
}
df_final<-matrix(ncol=2,nrow=54)
for (i in 1:54){
df_final<-rbind(df_final,helper[i][[1]])
}
helper[2][[1]]
typeof(helper[2][[1]])
typeof(unlist(helper[2][[1]]))
unlist(helper[2][[1]])
unlist(helper[][[1]])
unlist(helper)
helper
unlist(helper)
simplifyu(helper)
simplify(helper)
df_final<-matrix(ncol=2,nrow=54)
for (i in 1:54){
df_final<-rbind(df_final,as.character(unlist(helper[i][[1]])))
}
df_final
head(df_final,5)
head(df_final,2)
head(df_final,10)
helper<-dapply(split(df_sort,df_sort[,1]),function(x)make_statedf(x,num))
helper<-sapply(split(df_sort,df_sort[,1]),function(x)make_statedf(x,num))
helper
helper<-mapply(split(df_sort,df_sort[,1]),function(x)make_statedf(x,num))
helper<-vapply(split(df_sort,df_sort[,1]),function(x)make_statedf(x,num))
helper<-lapply(split(df_sort,df_sort[,1]),function(x)make_statedf(x,num))
helper
helper[,1]
helper[1,]
unlist(helper)
as.vector(helper)
joder<-data.frame(matrix(unlist(helper), nrow=54, byrow=T))
do.call(rbind.data.frame,helper)
df_final<-do.call(rbind.data.frame,helper)
## Return a data frame with the hospital names and the
names(df_final)<-c("state","hospital")
names(df_final)
df_final$state<-row.names(df_final)
df_final
df_final<-do.call(rbind.data.frame,helper)
names(df_final)<-"hospital"
df_final$state<-row.names(df_final)
head(df_final)
make_statedf<-function(x,num){
if (num == "best") return( as.data.frame(x[1,2],x[1,1]))
if (num == "worst") return( as.data.frame(x[which.max(x[,3]),2],x[1,1]))
y<-as.data.frame(x[num,2],x[1,1])
y
}
helper<-lapply(split(df_sort,df_sort[,1]),function(x)make_statedf(x,num))
num="best"
helper<-lapply(split(df_sort,df_sort[,1]),function(x)make_statedf(x,num))
df_final<-do.call(rbind.data.frame,helper)
names(df_final)<-"hospital"
df_final$state<-row.names(df_final)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
split(df_sort,df_sort[,1])
split(df_sort,df_sort[,1])[1]
as.data.frame(split(df_sort,df_sort[,1])[1])
split(df_sort,df_sort[,1])[[1]]
which.max(split(df_sort,df_sort[,1])[[1]][,3])
split(df_sort,df_sort[,1])[[1]][which.max(split(df_sort,df_sort[,1])[[1]][,3]),2]
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"), 3)
x<-split(df_sort,df_sort[,1])[[1]]
make_statedf(x,"worst")
ncols(make_statedf(x,"worst"))
ncol(make_statedf(x,"worst"))
row.name(make_statedf(x,"worst"))
row.names(make_statedf(x,"worst"))
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
tail(rankall("heart failure"), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
tail(rankall("pneumonia", "worst"), 3)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"), 3)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("pneumonia", "worst"), 3)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"), 3)
if (!is.data.frame(x)) return("no data")
make_statedf<-function(x,num){
if (!is.data.frame(x)) return("no data")
if (num == "best") return(as.data.frame(x[1,1],row.names(x[1,])))
if (num == "worst") return(as.data.frame(x[which.max(x[,1]),1],row.names(x[which.max(x[,1]),1])))
if (num > length(x[,1])) return(NA)
y<-as.data.frame(x[num,2],x[1,1])
y
}
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
make_statedf<-function(x,num){
if (!is.data.frame(x)) return("no data")
if (num == "best") return(as.data.frame(x[1,1],row.names(x[1,])))
if (num == "worst") return(as.data.frame(x[which.max(x[,1]),1],row.names(x[which.max(x[,1]),1])))
if (num > length(x[,1])) return(NA)
y<-as.data.frame(x[num,2],x[1,1])
y
}
tail(rankall("pneumonia", "worst"), 3)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"), 3)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"), 3)
split(df_sort,df_sort[,1])
lapply(split(df_sort,df_sort[,1]),function(x)x)
lapply(split(df_sort,df_sort[,1]),function(x)max[x[,1]])
lapply(split(df_sort,df_sort[,1]),function(x)max[x[,2]])
lapply(split(df_sort,df_sort[,1]),function(x)max[x[,3]])
lapply(split(df_sort,df_sort[,1]),function(x)max(x[,3]))
lapply(split(df_sort,df_sort[,1]),function(x)max(x[,2]))
lapply(split(df_sort,df_sort[,1]),function(x)max(x[,1]))
lapply(split(df_sort,df_sort[,1]),function(x)max(x[,2]))
lapply(split(df_sort,df_sort[,1]),function(x)max(x[,3]))
lapply(split(df_sort,df_sort[,1]),function(x)max(x[,3]),na.rm=TRUE)
lapply(split(df_sort,df_sort[,1]),function(x)max(x[,3]),na.rm=TRUE))
lapply(split(df_sort,df_sort[,1]),function(x)max(x[,3],na.rm=TRUE))
lapply(split(df_sort,df_sort[,1]),function(x)which.max(x[,3],na.rm=TRUE))
lapply(split(df_sort,df_sort[,1]),function(x)which.max(x[,3]))
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"), 3)
lapply(split(df_sort,df_sort[,1]),function(x)x[which.max(x[,3]),2])
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"), 3)
lapply(split(df_sort,df_sort[,1]),function(x)x[which.max(x[,3]),2])
do.call(rbind.data.frame,lapply(split(df_sort,df_sort[,1]),function(x)x[which.max(x[,3]),2]))
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"), 3)
head(rankall("heart attack", 20), 10)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
num
head(rankall("heart attack", "best"), 10)
head(rankall("heart attack", 20), 10)
split(df_sort,df_sort[,1]),function(x)x[which.min(x[,3]),2])
lapply(split(df_sort,df_sort[,1]),function(x)x[which.min(x[,3]),2])
lapply(split(df_sort,df_sort[,1]),function(x)x[1,2])
lapply(split(df_sort,df_sort[,1]),function(x)x)
lapply(split(df_sort,df_sort[,1]),function(x)x[num,2])
lapply(split(df_sort,df_sort[,1]),function(x)x[20,2])
source('~/.active-rstudio-document')
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
num=20
is.integer(num)
is.numeric(num)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankall.R')
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/best.R')
best("TX", "heart attack")
best("MD", "heart attack")
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/best.R')
best("MD", "heart attack")
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/best.R')
best("MD", "heart attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
submit()
source('~/Desktop/coursera/gitrepository/datasciencecoursera/rprogramming/ProgAssignment3/rankhospital.R')
submit()
submit()
submit()
submit()
submit()
submit()
